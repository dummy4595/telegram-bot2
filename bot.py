import asyncio
import logging
import openai
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI
async def ask_openai(prompt, use_gpt4=True):
    model = "gpt-4" if use_gpt4 else "gpt-3.5-turbo"
    
    try:
        response = await openai.ChatCompletion.acreate(
            model=model,
            messages=[{"role": "user", "content": prompt}]
        )
        return response["choices"][0]["message"]["content"]
    
    except openai.error.RateLimitError:
        if use_gpt4:  # –ï—Å–ª–∏ GPT-4 –¥–∞–ª –ª–∏–º–∏—Ç, –ø—Ä–æ–±—É–µ–º GPT-3.5
            return await ask_openai(prompt, use_gpt4=False)
        return "‚ùå –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GPT-3.5."

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ChatGPT –≤ Telegram.\n\n"
                         "üìå –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
                         "`/check [—Ç–≤–æ–π —Ç–µ–∫—Å—Ç]`")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check (–ø—Ä–æ–≤–µ—Ä–∫–∞ –î–ó)
@dp.message(Command("check"))
async def check_homework(message: Message):
    text = message.text.replace("/check", "").strip()
    
    if not text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/check`.")
        return

    reply_text = await ask_openai(f"–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —É–∫–∞–∂–∏ –æ—à–∏–±–∫–∏: {text}")
    await message.answer(reply_text)

# –û–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (ChatGPT-—Ä–µ–∂–∏–º)
@dp.message()
async def chat_with_gpt(message: Message):
    reply_text = await ask_openai(message.text)
    await message.answer(reply_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
