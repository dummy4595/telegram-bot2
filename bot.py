import asyncio
<<<<<<< HEAD
import logging
import openai
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–∫—Å–∏ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
PROXY_LOGIN = os.getenv("PROXY_LOGIN")
PROXY_PASSWORD = os.getenv("PROXY_PASSWORD")
PROXY_IP = os.getenv("PROXY_IP")
PROXY_PORT = os.getenv("PROXY_PORT")

# –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å)
if PROXY_IP and PROXY_PORT and PROXY_LOGIN and PROXY_PASSWORD:
    PROXY_URL = f"http://{PROXY_LOGIN}:{PROXY_PASSWORD}@{PROXY_IP}:{PROXY_PORT}"
else:
    PROXY_URL = None

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenAI API
openai.api_key = OPENAI_API_KEY
=======
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
import openai

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
>>>>>>> 5c862ed70c8ec9808852f0ef07c978e9a207e0dc

# ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∫–ª—é—á–∏
if not BOT_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞! –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞! API-–∫–ª—é—á OpenAI –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

# ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

<<<<<<< HEAD

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
async def create_bot():
    connector = aiohttp.TCPConnector(ssl=False)  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å loop
    session = aiohttp.ClientSession(connector=connector)

    bot = Bot(token=BOT_TOKEN, proxy=PROXY_URL) if PROXY_URL else Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    return bot, dp, session


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ChatGPT –≤ Telegram. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
                         "üìå –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
                         "`/check [—Ç–≤–æ–π —Ç–µ–∫—Å—Ç]`")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check (–ø—Ä–æ–≤–µ—Ä–∫–∞ –î–ó)
async def check_homework(message: Message):
    text = message.text.replace("/check", "").strip()

    if not text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/check`.")
        return

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."},
                {"role": "user", "content": f"–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —É–∫–∞–∂–∏ –æ—à–∏–±–∫–∏: {text}"}
            ]
        )
        reply_text = response["choices"][0]["message"]["content"]
    except openai.OpenAIError as e:
        reply_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –î–ó: {str(e)}"
    except Exception as e:
        reply_text = f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    await message.answer(reply_text)


# –û–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (ChatGPT-—Ä–µ–∂–∏–º)
async def chat_with_gpt(message: Message):
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[{"role": "user", "content": message.text}]
        )
        reply_text = response["choices"][0]["message"]["content"]
    except openai.OpenAIError as e:
        reply_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    except Exception as e:
        reply_text = f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    await message.answer(reply_text)

=======
# ‚úÖ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT-–±–æ—Ç ü§ñ\n–ó–∞–¥–∞–≤–∞–π –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI
@dp.message()
async def chatgpt_handler(message: Message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–π gpt-4, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            messages=[{"role": "user", "content": message.text}],
            api_key=OPENAI_API_KEY  # –ü–µ—Ä–µ–¥–∞—á–∞ API-–∫–ª—é—á–∞
        )
        reply_text = response["choices"][0]["message"]["content"]
        await message.answer(reply_text)
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò!")
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
>>>>>>> 5c862ed70c8ec9808852f0ef07c978e9a207e0dc

# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot, dp, session = await create_bot()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(start_handler, Command("start"))
    dp.message.register(check_homework, Command("check"))
    dp.message.register(chat_with_gpt)

    try:
        await dp.start_polling(bot)
    finally:
        await session.close()  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import sys

    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    asyncio.run(main())
